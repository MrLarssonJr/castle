use std::str::FromStr;
use std::rc::Rc;

use crate::ast::*;

grammar;

pub Expression: Expression = {
    #[precedence(level="0")]
    Atom,

    #[precedence(level="1")]
    "-" <Expression> => Expression::unary(vec!["-"], <>),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expression> "*" <r:Expression> => Expression::binary_operation(l, vec![("*", r)]),
    <l:Expression> "/" <r:Expression> => Expression::binary_operation(l, vec![("/", r)]),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expression> "+" <r:Expression> => Expression::binary_operation(l, vec![("+", r)]),
    <l:Expression> "-" <r:Expression> => Expression::binary_operation(l, vec![("-", r)]),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expression> "<" <r:Expression> => Expression::binary_operation(l, vec![("<", r)]),
    <l:Expression> "<=" <r:Expression> => Expression::binary_operation(l, vec![("<=", r)]),
    <l:Expression> "==" <r:Expression> => Expression::binary_operation(l, vec![("==", r)]),
    <l:Expression> "!=" <r:Expression> => Expression::binary_operation(l, vec![("!=", r)]),
    <l:Expression> ">=" <r:Expression> => Expression::binary_operation(l, vec![(">=", r)]),
    <l:Expression> ">" <r:Expression> => Expression::binary_operation(l, vec![(">", r)]),

    #[precedence(level="5")]
    "!" <Expression> => Expression::unary(vec!["!"], <>),

    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expression> "&&" <r:Expression> => Expression::binary_operation(l, vec![("&&", r)]),

    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expression> "||" <r:Expression> => Expression::binary_operation(l, vec![("||", r)]),
};

Atom: Expression = {
    FunctionApplication,
    FunctionLiteral,
    LetIn,
    IfElse,
    Identifier => Expression::Identifier(IdentifierExpression(<>)),
    NumberLiteral,
    BooleanLiteral,
}

// A literal that produces a boolean
BooleanLiteral: Expression = {
    "true" => Expression::BooleanLiteral(BooleanLiteralExpression(true)),
    "false" => Expression::BooleanLiteral(BooleanLiteralExpression(false)),
};

// A literal that produces a number
NumberLiteral: Expression = r"[0-9]+" => Expression::NumberLiteral(NumberLiteralExpression(isize::from_str(<>).unwrap()));


// A literal that produces a function
FunctionLiteral: Expression = "fn" "(" <parameters:Comma<Identifier>?> ")" "{" <body:Expression> "}" => match parameters {
    Some(parameters) => {
        let parameters: Vec<Identifier> = parameters;
        Expression::FunctionDefinition(FunctionDefinitionExpression {
            parameters,
            body: Rc::new(body),
        })
    },
    None => Expression::FunctionDefinition(FunctionDefinitionExpression {
        parameters: Vec::new(),
        body: Rc::new(body),
    }),
};

IfElse: Expression = "if" <condition:Expression> "{" <then_branch:Expression> "}" "else" "{" <else_branch:Expression> "}" => Expression::IfElse(IfElseExpression {
    condition: Rc::new(condition),
    then_branch: Rc::new(then_branch),
    else_branch: Rc::new(else_branch),
});

LetIn: Expression = "let" <binding:Identifier> "=" <value:Expression> "in" <body:Expression> ";" => Expression::LetIn(LetInExpression { binding, value: Rc::new(value), body: Rc::new(body) });

FunctionApplication: Expression = <function:Atom> "(" <arguments:Comma<Expression>?> ")" => Expression::FunctionApplication(FunctionApplicationExpression {
    function: Rc::new(function),
    arguments: arguments.unwrap_or_else(|| Vec::new()),
});

Comma<T>: Vec<T> = <head:T> <mut tail:("," <T>)*> => {
    tail.insert(0, head);
    tail
};

Identifier: Identifier = r"[a-zA-Z_-]+" => Identifier(String::from(<>));
